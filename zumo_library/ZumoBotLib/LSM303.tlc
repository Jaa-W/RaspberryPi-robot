%% File : LSM303.tlc
%% Created: Thu Apr 24 13:48:24 2014
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "LSM303.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  LSM303 "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %assign hFileName = "LSM303_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"
    extern void LSM303_Outputs_wrapper_accel(void *Acceleration, void *__AccelerationBUS,
			void *Compass, void *__CompassBUS,
			real_T *Heading,
			const real_T *xD,
			const real_T  *sampletime, const int_T  p_width0,
			const boolean_T  *debug, const int_T  p_width1,
			const real_T  *MinCompassX, const int_T  p_width2,
			const real_T  *MaxCompassX, const int_T  p_width3,
			const real_T  *MinCompassY, const int_T  p_width4,
			const real_T  *MaxCompassY, const int_T  p_width5,
			const real_T  *MinCompassZ, const int_T  p_width6,
			const boolean_T  *MaxCompassZ, const int_T  p_width7);
	 extern void LSM303_Update_wrapper_accel(void *Acceleration, void *__AccelerationBUS,
			void *Compass, void *__CompassBUS,
			const real_T *Heading,
			real_T *xD,
			const real_T  *sampletime,  const int_T  p_width0,
			const boolean_T  *debug,  const int_T  p_width1,
			const real_T  *MinCompassX,  const int_T  p_width2,
			const real_T  *MaxCompassX,  const int_T  p_width3,
			const real_T  *MinCompassY,  const int_T  p_width4,
			const real_T  *MaxCompassY,  const int_T  p_width5,
			const real_T  *MinCompassZ,  const int_T  p_width6,
			const boolean_T  *MaxCompassZ,  const int_T  p_width7);
    #endif
    %closefile hFile

    %assign cFileName = "LSM303_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "LSM303_bus.h"
	void LSM303_Outputs_wrapper_accel(void *Acceleration, void *__AccelerationBUS,
			void *Compass, void *__CompassBUS,
			real_T *Heading,
			const real_T *xD,
			const real_T  *sampletime, const int_T  p_width0,
			const boolean_T  *debug, const int_T  p_width1,
			const real_T  *MinCompassX, const int_T  p_width2,
			const real_T  *MaxCompassX, const int_T  p_width3,
			const real_T  *MinCompassY, const int_T  p_width4,
			const real_T  *MaxCompassY, const int_T  p_width5,
			const real_T  *MinCompassZ, const int_T  p_width6,
			const boolean_T  *MaxCompassZ, const int_T  p_width7){	LSM303_Outputs_wrapper((accel *) __AccelerationBUS,
			(compass *) __CompassBUS,
			Heading,
			xD,
			sampletime, p_width0,
			debug, p_width1,
			MinCompassX, p_width2,
			MaxCompassX, p_width3,
			MinCompassY, p_width4,
			MaxCompassY, p_width5,
			MinCompassZ, p_width6,
			MaxCompassZ, p_width7);

	%assign dTypeId = LibBlockOutputSignalDataTypeId(0)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)Acceleration", "(*(accel*) __AccelerationBUS)", 0)>

	%assign dTypeId = LibBlockOutputSignalDataTypeId(1)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)Compass", "(*(compass*) __CompassBUS)", 1)>
}

	void LSM303_Update_wrapper_accel(void *Acceleration, void *__AccelerationBUS,
			void *Compass, void *__CompassBUS,
			const real_T *Heading,
			real_T *xD,
			const real_T  *sampletime,  const int_T  p_width0,
			const boolean_T  *debug,  const int_T  p_width1,
			const real_T  *MinCompassX,  const int_T  p_width2,
			const real_T  *MaxCompassX,  const int_T  p_width3,
			const real_T  *MinCompassY,  const int_T  p_width4,
			const real_T  *MaxCompassY,  const int_T  p_width5,
			const real_T  *MinCompassZ,  const int_T  p_width6,
			const boolean_T  *MaxCompassZ,  const int_T  p_width7){	LSM303_Update_wrapper((accel *) __AccelerationBUS,
			(compass *) __CompassBUS,
			                          Heading,
			xD,
			sampletime, p_width0,
			debug, p_width1,
			MinCompassX, p_width2,
			MaxCompassX, p_width3,
			MinCompassY, p_width4,
			MaxCompassY, p_width5,
			MinCompassZ, p_width6,
			MaxCompassZ, p_width7);

	%assign dTypeId = LibBlockOutputSignalDataTypeId(0)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)Acceleration", "(*(accel*) __AccelerationBUS)", 0)>

	%assign dTypeId = LibBlockOutputSignalDataTypeId(1)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)Compass", "(*(compass*) __CompassBUS)", 1)>
}

   %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs
    
  extern void LSM303_Outputs_wrapper(accel *Acceleration,
			compass *Compass,
			real_T *Heading,
			const real_T *xD,
			const real_T  *sampletime, const int_T  p_width0,
			const boolean_T  *debug, const int_T  p_width1,
			const real_T  *MinCompassX, const int_T  p_width2,
			const real_T  *MaxCompassX, const int_T  p_width3,
			const real_T  *MinCompassY, const int_T  p_width4,
			const real_T  *MaxCompassY, const int_T  p_width5,
			const real_T  *MinCompassZ, const int_T  p_width6,
			const boolean_T  *MaxCompassZ, const int_T  p_width7);
  extern void LSM303_Update_wrapper(accel *Acceleration,
			compass *Compass,
			const real_T *Heading,
			real_T *xD,
			const real_T  *sampletime,  const int_T  p_width0,
			const boolean_T  *debug,  const int_T  p_width1,
			const real_T  *MinCompassX,  const int_T  p_width2,
			const real_T  *MaxCompassX,  const int_T  p_width3,
			const real_T  *MinCompassY,  const int_T  p_width4,
			const real_T  *MaxCompassY,  const int_T  p_width5,
			const real_T  *MinCompassZ,  const int_T  p_width6,
			const boolean_T  *MaxCompassZ,  const int_T  p_width7);
  %closefile externs
  %<LibCacheExtern(externs)>

 %endif
  %%
%endfunction

%% InitializeConditions =========================================================
 %%
 %function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
  {

   real_T initVector[1] = {0};
   %assign rollVars = ["<dwork>/DSTATE"]
   %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
   %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
     %if %<LibBlockDWorkWidth(DSTATE)> == 1
       %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
      %else
       %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
      %endif
   %endroll
  }
  
 %endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
     %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
   %else
     %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
   %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
     %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
   %else
     %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
   %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
     %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
   %else
     %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
   %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1
     %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
   %else
     %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
   %endif
  %assign nelements7 = LibBlockParameterSize(P7)
  %assign param_width7 = nelements7[0] * nelements7[1]
  %if (param_width7) > 1
     %assign pp7 = LibBlockMatrixParameterBaseAddr(P7)
   %else
     %assign pp7 = LibBlockParameterAddr(P7, "", "", 0)
   %endif
  %assign nelements8 = LibBlockParameterSize(P8)
  %assign param_width8 = nelements8[0] * nelements8[1]
  %if (param_width8) > 1
     %assign pp8 = LibBlockMatrixParameterBaseAddr(P8)
   %else
     %assign pp8 = LibBlockParameterAddr(P8, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %assign y0BUS_ptr = LibBlockDWorkAddr(y0BUS, "", "", 0)
    %assign y1BUS_ptr = LibBlockDWorkAddr(y1BUS, "", "", 0)
	LSM303_Outputs_wrapper_accel( %<py0>, %<y0BUS_ptr>, %<py1>, %<y1BUS_ptr>, %<py2>,  %<pxd>,  %<pp1>, %<param_width1>,  %<pp2>, %<param_width2>,  %<pp3>, %<param_width3>,  %<pp4>, %<param_width4>,  %<pp5>, %<param_width5>,  %<pp6>, %<param_width6>,  %<pp7>, %<param_width7>, %<pp8>, %<param_width8>);

  %else
	LSM303_Outputs_wrapper( %<py0>, %<py1>, %<py2>,  %<pxd>,  %<pp1>, %<param_width1>,  %<pp2>, %<param_width2>,  %<pp3>, %<param_width3>,  %<pp4>, %<param_width4>,  %<pp5>, %<param_width5>,  %<pp6>, %<param_width6>,  %<pp7>, %<param_width7>, %<pp8>, %<param_width8>);

  %endif
  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%     
%%
%function Update(block, system) Output
    /* S-Function "LSM303_wrapper" Block: %<Name> */
   
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  
   
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]  
  %if (param_width1) > 1  
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else  
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif 
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]  
  %if (param_width2) > 1  
   %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else  
   %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif 
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]  
  %if (param_width3) > 1  
   %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else  
   %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif 
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]  
  %if (param_width4) > 1  
   %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else  
   %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif 
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]  
  %if (param_width5) > 1  
   %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else  
   %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif 
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]  
  %if (param_width6) > 1  
   %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
  %else  
   %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %endif 
  %assign nelements7 = LibBlockParameterSize(P7)
  %assign param_width7 = nelements7[0] * nelements7[1]  
  %if (param_width7) > 1  
   %assign pp7 = LibBlockMatrixParameterBaseAddr(P7)
  %else  
   %assign pp7 = LibBlockParameterAddr(P7, "", "", 0)
  %endif 
  %assign nelements8 = LibBlockParameterSize(P8)
  %assign param_width8 = nelements8[0] * nelements8[1]  
  %if (param_width8) > 1  
   %assign pp8 = LibBlockMatrixParameterBaseAddr(P8)
  %else  
   %assign pp8 = LibBlockParameterAddr(P8, "", "", 0)
  %endif
 
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %assign AccelerationBUS_ptr = LibBlockDWorkAddr(AccelerationBUS, "", "", 0)
    %assign CompassBUS_ptr = LibBlockDWorkAddr(CompassBUS, "", "", 0)
	LSM303_Update_wrapper_accel( %<py0>, %<y0BUS_ptr>, %<py1>, %<y1BUS_ptr>, %<py2>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>, %<pp7>, %<param_width7>, %<pp8>, %<param_width8>);
  %else
	LSM303_Update_wrapper( %<py0>, %<py1>, %<py2>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>, %<pp7>, %<param_width7>, %<pp8>, %<param_width8>);
  %endif

  

  %%
%endfunction 
%% [EOF] LSM303.tlc






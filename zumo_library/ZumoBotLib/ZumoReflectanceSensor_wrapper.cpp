/*
  *
  *   --- THIS FILE GENERATED BY S-FUNCTION BUILDER: 3.0 ---
  *
  *   This file is a wrapper S-function produced by the S-Function
  *   Builder which only recognizes certain fields.  Changes made
  *   outside these fields will be lost the next time the block is
  *   used to load, edit, and resave this file. This file will be overwritten
  *   by the S-function Builder block. If you want to edit this file by hand, 
  *   you must change it only in the area defined as:  
  *
  *        %%%-SFUNWIZ_wrapper_XXXXX_Changes_BEGIN 
  *            Your Changes go here
  *        %%%-SFUNWIZ_wrapper_XXXXXX_Changes_END
  *
  *   For better compatibility with the Simulink Coder, the
  *   "wrapper" S-function technique is used.  This is discussed
  *   in the Simulink Coder User's Manual in the Chapter titled,
  *   "Wrapper S-functions".
  *
  *   Created: Sat Oct 12 14:36:50 2013
  */


/*
 * Include Files
 *
 */
#if defined(MATLAB_MEX_FILE)
#include "tmwtypes.h"
#include "simstruc_types.h"
#else
#include "rtwtypes.h"
#endif

/* %%%-SFUNWIZ_wrapper_includes_Changes_BEGIN --- EDIT HERE TO _END */
#ifndef MATLAB_MEX_FILE
 #include <Arduino.h>
 unsigned int pins[] = { 4, A3, 11, A0, A2, 5}; 
#endif
/* %%%-SFUNWIZ_wrapper_includes_Changes_END --- EDIT HERE TO _BEGIN */
#define u_width 
#define y_width 1
/*
 * Create external references here.  
 *
 */
/* %%%-SFUNWIZ_wrapper_externs_Changes_BEGIN --- EDIT HERE TO _END */
 
/* %%%-SFUNWIZ_wrapper_externs_Changes_END --- EDIT HERE TO _BEGIN */

/*
 * Output functions
 *
 */
extern "C" void ZumoReflectanceSensor_Outputs_wrapper(uint16_T *sensorReading,
                          real_T *line ,
			      const real_T  *xD,
                          const real_T  *sampleTime, const int_T  p_width0, 
                          const uint8_T  *emitterPin, const int_T  p_width1, 
                          const boolean_T  *debug, const int_T p_width2)
{
/* %%%-SFUNWIZ_wrapper_Outputs_Changes_BEGIN --- EDIT HERE TO _END */
if (xD[0] == 1) {
   
   #ifndef MATLAB_MEX_FILE
        int i;
        // 1. Make Pins as Output
        for (i = 0; i < 6; ++i) {
            sensorReading[i] = 2000;
            digitalWrite(pins[i], HIGH);
            pinMode(pins[i], OUTPUT);
        }
        // 2. Charge the line for 10 micro seconds
        delayMicroseconds(10); 
        // 3. Drive the Pins as Inputs (disable internal pullups)
        for (i = 0; i < 6; ++i) {
            pinMode(pins[i], INPUT);
            digitalWrite(pins[i], LOW);
        }
        // 4. Measure Pulse Time to get sensor reading
        unsigned long startTime = micros();
        while((micros() - startTime) < 2000) {
            unsigned int time = micros() - startTime;
            for (i = 0; i < 6; ++i) {
                if (digitalRead(pins[i]) == LOW && time < sensorReading[i]) {
                   sensorReading[i] = time;
                }
            }
        }
        
        // 5. Calculate the line
        unsigned int onLine = 0;
        unsigned long avg = 0;
        unsigned int sum = 0;
        for (i = 0; i < 6; ++i) {
            int value = sensorReading[i];
            // Store whether on Line
            if (value > 200) {
                onLine = 1;
            }
            // Neglect Noise
            if(value > 50) {
                avg += (long)(value) *(i*1000);
                sum += value;
            }
        }
        // If not online, return previous position
        if(onLine == 0) {
            if (xD[1] < 2500) {
                line[0] = 0;
                return;
            } else {
                line[0] = 5000;
                return;
            }
        } else {
            line[0] = (double) avg/sum;
        }
        if(debug[0]) {
            Serial.print("Line:");
            Serial.print(line[0]);
            Serial.print("  Sensors:");
            Serial.print(sensorReading[0]);Serial.print("-");
            Serial.print(sensorReading[1]);Serial.print("-");
            Serial.print(sensorReading[2]);Serial.print("-");
            Serial.print(sensorReading[3]);Serial.print("-");
            Serial.print(sensorReading[4]);Serial.print("-");
            Serial.println(sensorReading[5]);
        }
    #endif
}
/* %%%-SFUNWIZ_wrapper_Outputs_Changes_END --- EDIT HERE TO _BEGIN */
}

/*
  * Updates function
  *
  */
extern "C" void ZumoReflectanceSensor_Update_wrapper(const uint16_T *sensorReading,
                          const real_T *line ,
                          real_T *xD, 
                          const real_T  *sampleTime,  const int_T  p_width0,
                          const uint8_T  *emitterPin,  const int_T  p_width1,
                           const boolean_T *debug, const int_T  p_width2)
{
  /* %%%-SFUNWIZ_wrapper_Update_Changes_BEGIN --- EDIT HERE TO _END */
if (xD[0] != 1) {
    #ifndef MATLAB_MEX_FILE
        // Sensor Pins are 4, A3, 11, A0, A2, 5
        // Timeout or Max Value is 2000
        // emitter Pin = 2 
        // can add calibration later
        if(debug[0]) {
            Serial.begin(9600);
        }
    #endif
    xD[0] = 1;
    xD[1] = 0;
}

#ifndef MATLAB_MEX_FILE
    xD[1] = line[0];
#endif
/* %%%-SFUNWIZ_wrapper_Update_Changes_END --- EDIT HERE TO _BEGIN */
}
